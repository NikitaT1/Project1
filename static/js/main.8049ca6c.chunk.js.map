{"version":3,"sources":["AddNewItemForm.js","api.js","reducer.js","TodoListTitle.js","TodoListHeader.js","TodoListTask.js","TodoListTasks.js","TodoListFooter.js","TodoList.js","App.js","serviceWorker.js","Store.js","index.js"],"names":["AddNewItemForm","state","error","title","onAddItemClick","newText","_this","setState","props","addItem","onTitleChanged","e","currentTarget","value","onKeyPress","key","render","react_default","a","createElement","className","type","placeholder","onChange","onClick","React","Component","instance","axios","create","baseURL","withCredentials","headers","API-KEY","api","createTask","todoListId","post","concat","createTodoList","uploadTodolists","get","deleteTodoList","id","delete","deleteTask","getTasks","updateTasks","newTask","put","ADD_TASK","DEL_TASK","initialState","todoLists","tasks","delTaskCallTC","todolistId","taskId","dispatch","then","res","delTaskCallAC","addTaskTC","data","item","addTaskAC","reducer","arguments","length","undefined","action","_objectSpread","todolists","map","tl","allTasks","Object","toConsumableArray","newTodolist","todolist","task","obj","filter","t","TodoListTitle","deleteTodolist","ConnectedTodoListTitle","connect","delTodoListAC","delTodoListTC","TodoListHeader","src_TodoListTitle","src_AddNewItemForm","onTaskAdded","TodoListTask","editMode","taskTitle","onIsDoneChanged","status","checked","onTaskStatusChanged","activateEditMode","deactivateEditMode","onTaskTitleChanged","delTask","delTaskCall","onBlur","autoFocus","priority","TodoListTasks","tasksElements","src_TodoListTask","TodoListFooter","isHidden","onAllFilterClick","onFilterChanged","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","TodoList","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","restoreState","setTasks","nextTaskId","addTask","newFilterValue","changeTask","TodoList_objectSpread","find","updateTask","_this$props$tasks","src_TodoListHeader","src_TodoListTasks","isDone","src_TodoListFooter","newTasksTitileRef","createRef","ConnectedTodoList","changeTaskAC","tasksId","items","setTasksAC","setTasksTC","App","addTodoList","setTodoLists","src_TodoList","Fragment","ConnectedApp","newTodoList","Boolean","window","location","hostname","match","store","createStore","rootReducer","applyMiddleware","thunkMiddleware","ReactDOM","Provider_default","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8049ca6c.chunk.js","sourcesContent":["import React from 'react';\n\n\nclass AddNewItemForm extends React.Component {\n\n    state = {\n        error: false,\n        title: \"\"\n    };\n\n\n    onAddItemClick = () => {\n        let newText = this.state.title;\n        if (newText === \"\") {\n            this.setState({error: true})\n        }\n        else {this.setState({error: false, title: \"\"})}\n        this.props.addItem(newText);\n\n    };\n\n    onTitleChanged = (e) => {\n        this.setState({error: false,\n            title: e.currentTarget.value})\n\n    }\n\n    onKeyPress= (e)=> {\n        if (e.key === \"Enter\") {\n            this.onAddItemClick()\n        }\n    }\n\n    render = () => {\n\n        let error = this.state.error ? \"error\" : \"\";\n\n        return (\n            <div className=\"todoList-newTaskForm\">\n                <input type=\"text\" placeholder=\"New task name\" className={error} onChange={this.onTitleChanged}\n                       onKeyPress={this.onKeyPress} value={this.state.title}/>\n                <button onClick={this.onAddItemClick}>Add</button>\n            </div>\n\n        )\n    }\n}\n\nexport default AddNewItemForm\n\n\n\n\n","import axios from \"axios\"\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/todo-lists`,\r\n    withCredentials: true,\r\n    headers: {\"API-KEY\": \"1f7d7956-460f-4c20-a95b-d50d82e17d88\"}\r\n\r\n})\r\n\r\nexport const api = {\r\n    createTask (todoListId, newText) {\r\n        return instance.post(`/${todoListId}/tasks`,  {title: newText})\r\n    },\r\n    createTodoList (title) {\r\n        return instance.post(`/`,{title: title})\r\n    },\r\n\r\n    uploadTodolists () {\r\n        return instance.get()\r\n    },\r\n\r\n    deleteTodoList (id) {\r\n        return instance.delete(`/${id}`)\r\n    },\r\n    deleteTask(id) {\r\n        return instance.delete(`/tasks/${id}`)\r\n    },\r\n\r\n    getTasks(id) {\r\n        return instance.get(`/${id}/tasks`)\r\n    },\r\n\r\n    updateTasks(newTask) {\r\n        return instance.put(`/tasks/`, newTask,\r\n            {withCredentials: true,\r\n                headers: {\"API-KEY\": \"1f7d7956-460f-4c20-a95b-d50d82e17d88\"}})\r\n    }\r\n\r\n}","import {api} from \"./api\";\r\n\r\nexport const ADD_TODOLIST = \"Todolist/Reducer/ADD-TODOLIST\";\r\nexport const ADD_TASK = \"Todolist/Reducer/ADD-TASK\";\r\nexport const CHANGE_TASK = \"Todolist/Reducer/CHANGE-TASK\";\r\nexport const DEL_TODOLIST = \"Todolist/Reducer/DEL-TODOLIST\";\r\nexport const DEL_TASK = \"Todolist/Reducer/DEL_TASK\";\r\nexport const SET_TODOLIST = \"Todolist/Reducer/SET_TODOLIST\";\r\nexport const SET_TASKS = \"TodoList/Reducer/SET_TASKS\"\r\n\r\n\r\nconst initialState = {\r\n    todoLists: [],\r\n    tasks: []\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_TODOLIST:\r\n            return {\r\n                ...state, todoLists: action.todolists.map(tl => ({...tl, tasks: []}))\r\n\r\n            }\r\n        case SET_TASKS:\r\n            return {\r\n                ... state, todoLists: state.todoLists.map(tl => {\r\n                    if (tl.id === action.todoListId) {\r\n                        return {\r\n                            ...tl, tasks: action.allTasks\r\n                        }\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n        case ADD_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todoLists: [...state.todoLists, action.newTodolist]\r\n            }\r\n        case ADD_TASK: {\r\n            return {\r\n                ...state,\r\n                todoLists: state.todoLists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {...tl, tasks: [action.newTask, ...tl.tasks]}\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        case CHANGE_TASK: {\r\n            return {\r\n                ... state,\r\n                todoLists: state.todoLists.map (todolist => {\r\n                    if (todolist.id === action.todolistId) {\r\n                        return{... todolist,\r\n                            tasks: todolist.tasks.map(task=> {\r\n                                if (task.id === action.taskId) {\r\n                                    return {... task, ...action.obj}\r\n                                }else {\r\n                                    return task\r\n                                }\r\n                            })}\r\n                    } else {\r\n                        return todolist\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        case DEL_TODOLIST: {\r\n            return {\r\n                ...state,\r\n                todoLists: state.todoLists.filter(t => {\r\n                    return t.id !== action.todolistId\r\n                })\r\n            }\r\n        }\r\n        case DEL_TASK: {\r\n            return {\r\n                ... state,\r\n                todoLists: state.todoLists.map (t => {\r\n                    if (t.id === action.todolistId) {\r\n                        return {...t,\r\n                            tasks: t.tasks.filter (task => task.id !== action.taskId)\r\n                        }\r\n                    }\r\n                    else {\r\n                        return t\r\n                    }\r\n                })\r\n\r\n            }\r\n        }\r\n\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const addTaskAC = (newTask, todolistId) => {\r\n    debugger\r\n    return {type: ADD_TASK, newTask, todolistId}\r\n};\r\n\r\nexport const changeTaskAC = (taskId, obj, todolistId) => {\r\n    return {type: CHANGE_TASK, taskId, obj, todolistId}\r\n};\r\n\r\nexport const delTaskCallAC = (todolistId, taskId) => {\r\n    return {type: DEL_TASK, todolistId, taskId}\r\n};\r\n\r\nexport const addTodoAC = (newTodolist) => {\r\n    return {type: ADD_TODOLIST, newTodolist}\r\n};\r\n\r\nexport const delTodoListAC = (todolistId) => {\r\n    return {type: DEL_TODOLIST, todolistId}\r\n};\r\n\r\nexport const setTodoListsAC = (todolists) => {\r\n    return {type: SET_TODOLIST, todolists}\r\n};\r\n\r\nexport const setTasksAC = (allTasks, todoListId) => {\r\n    return {type: SET_TASKS, allTasks, todoListId}\r\n};\r\n\r\nexport const setTodoListsTC = () => (dispatch) => {\r\n    api.uploadTodolists()\r\n        .then(res => {\r\n            const action = setTodoListsAC(res.data);\r\n            dispatch(action)\r\n        });\r\n};\r\n\r\nexport const delTodoListTC = (todolistId) => (dispatch) => {\r\n    api.deleteTodoList(todolistId)\r\n        .then((res) => {\r\n           dispatch(delTodoListAC(todolistId))\r\n        })\r\n}\r\n\r\nexport const addTodoTC = (title) => (dispatch) => {\r\n    api.createTodoList(title)\r\n        .then(res => {\r\n            let newTodoList = res.data.data.item;\r\n            dispatch(addTodoAC(newTodoList))\r\n        })\r\n}\r\n\r\nexport const delTaskCallTC = (todolistId, taskId) => (dispatch) => {\r\n    api.deleteTask(taskId)\r\n        .then(res => {\r\n            dispatch(delTaskCallAC(todolistId, taskId))\r\n        });\r\n}\r\n\r\n/*export const changeTaskTC = (taskId, obj, todolistId, newTask) => (dispatch) => {\r\n    api.updateTasks(newTask)\r\n        .then( (res) => {\r\n            dispatch(changeTaskAC(taskId, obj, todolistId, newTask))\r\n        })\r\n}*/\r\n\r\nexport const addTaskTC = (todoListId, newText) => (dispatch) => {\r\n    api.createTask(todoListId, newText)\r\n        .then(res => {\r\n            let newTask = res.data.data.item;\r\n            dispatch(addTaskAC(newTask, todoListId))\r\n        });\r\n\r\n}\r\n\r\nexport const setTasksTC = (tasksId) => (dispatch) => {\r\n    api.getTasks(tasksId)\r\n        .then(res => {\r\n            let allTasks = res.data.items;\r\n            dispatch(setTasksAC(allTasks, tasksId))\r\n        });\r\n}\r\n\r\nexport default reducer;","import React from 'react';\nimport './App.css';\nimport connect from \"react-redux/lib/connect/connect\";\nimport {delTodoListAC, delTodoListTC} from \"./reducer\";\nimport axios from \"axios\";\nimport {api} from \"./api\";\n\n\nclass TodoListTitle extends React.Component {\n\n\n    deleteTodolist = () => {\n          this.props.deleteTodolist(this.props.id)\n    }\n\n\n    render = () => {\n\n\n        return (\n            <div>\n                <h3 className=\"todoList-header__title\">{this.props.title} <button onClick={this.deleteTodolist}>X</button>\n                </h3>\n\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        deleteTodolist: (todolistId) => {\n            const action = delTodoListTC (todolistId)\n            dispatch(action)\n            }\n        }\n}\n\n\n\nconst ConnectedTodoListTitle = connect(null, mapDispatchToProps) (TodoListTitle)\n\nexport default ConnectedTodoListTitle;\n\n","import React from 'react';\nimport './App.css';\nimport AddNewItemForm from \"./AddNewItemForm\";\nimport TodoListTitle from \"./TodoListTitle\";\n\nclass TodoListHeader extends React.Component {\n\n\n    render = () => {\n\n\n        return (\n            <div className=\"todoList-header\">\n                <TodoListTitle title={this.props.title} id={this.props.id}/>\n                <AddNewItemForm addItem={this.props.onTaskAdded}/>\n            </div>\n        );\n    }\n}\n\nexport default TodoListHeader;\n\n","import React from 'react';\nimport './App.css';\n\nclass TodoListTask extends React.Component {\n\n    state = {\n        editMode: false,\n        taskTitle: this.props.task.title\n    };\n\n    onIsDoneChanged = (e) => {\n        let status = e.currentTarget.checked ? 2 : 0;\n        this.props.onTaskStatusChanged(this.props.task.id, status);\n    };\n\n    activateEditMode = () => {\n        this.setState({editMode: true})\n    };\n\n    deactivateEditMode = () => {\n        this.setState({editMode: false})\n        this.props.onTaskTitleChanged(this.props.task.id, this.state.taskTitle)\n    };\n\n    onTitleChanged = (e) => {\n        this.setState({taskTitle: e.currentTarget.value})\n        //this.props.onTaskTitleChanged(e.currentTarget.value, this.props.task.id)\n    };\n\n    delTask = () => {\n        this.props.delTaskCall(this.props.id, this.props.task.id)\n    }\n\n\n\n\n    render = () => {\n\n        let checked = this.props.task.status === 2 ? \"todoList-task done\" : \"todoList-task\";\n\n        return (\n            <div className={checked}>\n                <input type=\"checkbox\" checked={this.props.task.status === 2}\n                       onChange={this.onIsDoneChanged}/>\n                {this.state.editMode ? <input onBlur={this.deactivateEditMode}\n                                              autoFocus={true} value={this.state.taskTitle}\n                                              onChange={this.onTitleChanged}/> :\n                    <span onClick={this.activateEditMode}>\n                   {/* {this.props.task.id} -*/} {this.props.task.title}</span>},\n                priority: {this.props.task.priority} <button onClick={this.delTask}>X</button>\n            </div>\n        );\n    }\n}\n\nexport default TodoListTask;\n\n","import React from 'react';\nimport './App.css';\nimport TodoListTask from \"./TodoListTask\";\n\nclass TodoListTasks extends React.Component {\n    render = () => {\n\n        let tasksElements = this.props.tasks.map( task => <TodoListTask task={task} id={this.props.id}\n                                                                        onTaskStatusChanged={this.props.onTaskStatusChanged}\n                                                                        onTaskTitleChanged={this.props.onTaskTitleChanged}\n                                                                        delTaskCall={this.props.delTaskCall}\n        />);\n\n        return (\n            <div className=\"todoList-tasks\">\n                {tasksElements}\n            </div>\n        );\n    }\n}\n\nexport default TodoListTasks;\n\n","import React from 'react';\nimport './App.css';\n\nclass TodoListFooter extends React.Component {\n\n    state = {\n        isHidden: false\n    };\n\n    onAllFilterClick = () => {\n        this.props.onFilterChanged(\"All\")\n    };\n    onCompletedFilterClick = () => {\n        this.props.onFilterChanged(\"Completed\")\n    };\n    onActiveFilterClick = () => {\n        this.props.onFilterChanged(\"Active\")\n    };\n    onShowFiltersClick = () => {\n        this.setState({isHidden: false})\n    };\n    onHideFiltersClick = () => {\n        this.setState({isHidden: true})\n    };\n\n    render = (props) => {\n\n        let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"\";\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"\";\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"\";\n\n        return (\n            <div className=\"todoList-footer\">\n                {!this.state.isHidden && <div>\n                    <button onClick={this.onAllFilterClick} className={classForAll}>All</button>\n                    <button onClick={this.onCompletedFilterClick} className={classForCompleted}>Completed</button>\n                    <button onClick={this.onActiveFilterClick} className={classForActive}>Active</button>\n                </div>}\n                {!this.state.isHidden && <span onClick={this.onHideFiltersClick}>Hide</span>}\n                {this.state.isHidden && <span onClick={this.onShowFiltersClick}>Show</span>}\n            </div>\n\n        );\n    }\n}\n\nexport default TodoListFooter;\n\n","import React from 'react';\nimport './App.css';\nimport TodoListHeader from \"./TodoListHeader\";\nimport TodoListTasks from \"./TodoListTasks\";\nimport TodoListFooter from \"./TodoListFooter\";\nimport connect from \"react-redux/lib/connect/connect\";\nimport {addTaskAC, addTaskTC, changeTaskAC, delTaskCallAC, delTaskCallTC, setTasksAC, setTasksTC} from \"./reducer\";\nimport axios from \"axios\"\nimport {api} from \"./api\";\n\nclass TodoList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.newTasksTitileRef = React.createRef();\n    };\n\n    componentDidMount() {\n        this.restoreState();\n    };\n\n    restoreState = () => {\n        this.props.setTasks(this.props.id)\n    };\n\n    nextTaskId = 0;\n\n    state = {\n        filterValue: \"All\"\n    };\n\n    onTaskAdded = (newText) => {\n        this.props.addTask(this.props.id, newText)};\n\n\n    onFilterChanged = (newFilterValue) => {\n        this.setState( {\n            filterValue: newFilterValue\n        } );\n    }\n\n    onTaskStatusChanged = (taskId, status) => {\n        this.changeTask(taskId, {status:status})\n    };\n\n    onTaskTitleChanged = (taskId, title ) => {\n        this.changeTask(taskId, {title:title})\n    };\n\n        changeTask = (taskId, obj) => {\n        let task = this.props.tasks.find((task) => {\n            return task.id === taskId\n        })\n        let newTask = {...task, ...obj}\n        api.updateTasks(newTask)\n            .then( (res) => {\n        this.props.updateTask (taskId, obj, this.props.id)\n            })\n    };\n\n\n\n\n  /*  changeTask = (taskId, obj) => {\n        this.props.tasks.forEach(task => {\n            if (task.id === taskId) {\n                let newTask = {...task, ...obj}\n                axios.put(`https://social-network.samuraijs.com/api/1.0/todo-lists/tasks/`, newTask,\n                    {withCredentials: true,\n                        headers: {\"API-KEY\": \"1f7d7956-460f-4c20-a95b-d50d82e17d88\"}})\n                    .then( (res) => {\n                this.props.updateTask(taskId, obj, this.props.id)\n            })\n        })\n    }*/\n\n\n    delTaskCall = (todolistId, taskId) => {\n        this.props.delTaskCall (todolistId, taskId)\n    }\n\n\n    render = () => {\n        let {tasks = []} = this.props;\n        return (\n            <div className=\"todoList\">\n                <TodoListHeader onTaskAdded={this.onTaskAdded} title={this.props.title} id={this.props.id} />\n                <TodoListTasks id={this.props.id} onTaskStatusChanged={this.onTaskStatusChanged}\n                               onTaskTitleChanged={this.onTaskTitleChanged} delTaskCall={this.delTaskCall}\n                               tasks={tasks.filter(t => {\n                                   if (this.state.filterValue === \"All\") {\n                                       return true;\n                                   }\n                                   if (this.state.filterValue === \"Active\") {\n                                       return t.isDone === false;\n                                   }\n                                   if (this.state.filterValue === \"Completed\") {\n                                       return t.isDone === true;\n                                   }\n                               })}/>\n                <TodoListFooter onFilterChanged={this.onFilterChanged} filterValue={this.state.filterValue} />\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addTask (todoListId, newText) {\n            const action = addTaskTC (todoListId, newText);\n            dispatch(action);\n        },\n        updateTask (taskId, obj, todolistId) {\n            const action = changeTaskAC (taskId, obj, todolistId);\n            dispatch(action);\n        },\n        delTaskCall (todolistId, taskId) {\n            const action = delTaskCallTC (todolistId, taskId)\n            dispatch(action);\n        },\n        setTasks (tasksId) {\n            const action = setTasksTC (tasksId);\n            dispatch(action)\n        }\n    }\n}\n\n\n\nconst ConnectedTodoList = connect(null, mapDispatchToProps) (TodoList)\n\nexport default ConnectedTodoList;","import React from 'react';\nimport './App.css';\nimport TodoList from \"./TodoList\";\nimport AddNewItemForm from \"./AddNewItemForm\";\nimport connect from \"react-redux/lib/connect/connect\";\nimport {addTodoAC, addTodoTC, setTodoListsAC, setTodoListsTC} from \"./reducer\";\nimport {api} from \"./api\";\n\nclass App extends React.Component {\n\n    nextTaskId = 5;\n\n    state = {\n        todolists: []\n    }\n\n\n    addTodoList = (title) => {\n        this.props.addTodoList(title);\n    }\n\n    componentDidMount() {\n        this.restoreState();\n    }\n\n\n    restoreState = () => {\n                this.props.setTodoLists();\n            }\n\n\n    render = () => {\n\n        const todoLists = this.props.todoLists.map(t => <TodoList id={t.id} title={t.title} tasks={t.tasks}/>)\n\n        return (\n            <>\n                <div>\n                    <AddNewItemForm addItem={this.addTodoList}/>\n                </div>\n                <div className=\"App\">\n                    {todoLists}\n                </div>\n            </>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        todoLists: state.todoLists\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addTodoList: (newTodolist) => {\n            const action = addTodoTC(newTodolist);\n            dispatch(action)\n        },\n        setTodoLists: () => {\n            dispatch(setTodoListsTC())\n        }\n    }\n}\nconst ConnectedApp = connect(mapStateToProps, mapDispatchToProps)(App);\nexport default ConnectedApp;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. TodoList is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {applyMiddleware, createStore} from \"redux\";\r\nimport rootReducer from \"./reducer\";\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    applyMiddleware(thunkMiddleware)\r\n);\r\n\r\nwindow.store = store;\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Provider from \"react-redux/lib/components/Provider\";\nimport store from \"./Store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}