{"version":3,"sources":["serviceWorker.js","AddNewItemForm.js","api.js","reducer.js","TodoListTitle.js","TodoListHeader.js","TodoListTask.js","TodoListTasks.js","TodoListFooter.js","TodoList.js","LoginApp.js","App.js","Store.js","index.js"],"names":["Boolean","window","location","hostname","match","AddNewItemForm","state","error","title","onAddItemClick","newText","setState","props","addItem","onTitleChanged","e","currentTarget","value","onKeyPress","key","render","className","type","placeholder","onChange","onClick","React","Component","instance","axios","create","baseURL","withCredentials","headers","api","todoListId","post","get","id","delete","newTask","put","authAPI","email","password","rememberMe","captcha","ADD_TODOLIST","ADD_TASK","CHANGE_TASK","DEL_TODOLIST","DEL_TASK","SET_TODOLIST","SET_TASKS","initialState","todoLists","tasks","isAuth","setTodoListsTC","dispatch","then","res","todolists","action","data","delTodoListTC","todolistId","delTodoListAC","addTodoTC","newTodoList","item","newTodolist","delTaskCallTC","taskId","delTaskCallAC","addTaskTC","addTaskAC","setTasksTC","tasksId","allTasks","items","setTasksAC","reducer","map","tl","todolist","task","obj","filter","t","TodoListTitle","deleteTodolist","ConnectedTodoListTitle","connect","TodoListHeader","onTaskAdded","TodoListTask","editMode","taskTitle","onIsDoneChanged","status","checked","onTaskStatusChanged","activateEditMode","deactivateEditMode","onTaskTitleChanged","delTask","delTaskCall","onBlur","autoFocus","priority","TodoListTasks","tasksElements","TodoListFooter","isHidden","onAllFilterClick","onFilterChanged","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","TodoList","restoreState","setTasks","nextTaskId","addTask","newFilterValue","changeTask","find","updateTask","newTasksTitileRef","createRef","this","ConnectedTodoList","changeTaskAC","LoginReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","name","LoginThunk","response","resultCode","alert","formData","App","addTodoList","setTodoLists","ConnectedApp","todoReducer","Reducer","combineReducers","formReducer","mainReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.de387914.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. TodoList is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\n\nclass AddNewItemForm extends React.Component {\n\n    state = {\n        error: false,\n        title: \"\"\n    };\n\n\n    onAddItemClick = () => {\n        let newText = this.state.title;\n        if (newText === \"\") {\n            this.setState({error: true})\n        }\n        else {this.setState({error: false, title: \"\"})}\n        this.props.addItem(newText);\n\n    };\n\n    onTitleChanged = (e) => {\n        this.setState({error: false,\n            title: e.currentTarget.value})\n\n    }\n\n    onKeyPress= (e)=> {\n        if (e.key === \"Enter\") {\n            this.onAddItemClick()\n        }\n    }\n\n    render = () => {\n\n        let error = this.state.error ? \"error\" : \"\";\n\n        return (\n            <div className=\"todoList-newTaskForm\">\n                <input type=\"text\" placeholder=\"New task name\" className={error} onChange={this.onTitleChanged}\n                       onKeyPress={this.onKeyPress} value={this.state.title}/>\n                <button onClick={this.onAddItemClick}>Add</button>\n            </div>\n\n        )\n    }\n}\n\nexport default AddNewItemForm\n\n\n\n\n","import axios from \"axios\"\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/todo-lists`,\r\n    withCredentials: true,\r\n    headers: {\"API-KEY\": \"1f7d7956-460f-4c20-a95b-d50d82e17d88\"}\r\n\r\n})\r\n\r\nexport const api = {\r\n    createTask (todoListId, newText) {\r\n        return instance.post(`/${todoListId}/tasks`,  {title: newText})\r\n    },\r\n    createTodoList (title) {\r\n        return instance.post(`/`,{title: title})\r\n    },\r\n\r\n    uploadTodolists () {\r\n        return instance.get()\r\n    },\r\n\r\n    deleteTodoList (id) {\r\n        return instance.delete(`/${id}`)\r\n    },\r\n    deleteTask(id) {\r\n        return instance.delete(`/tasks/${id}`)\r\n    },\r\n\r\n    getTasks(id) {\r\n        return instance.get(`/${id}/tasks`)\r\n    },\r\n\r\n    updateTasks(newTask) {\r\n        return instance.put(`/tasks/`, newTask,\r\n            {withCredentials: true,\r\n                headers: {\"API-KEY\": \"1f7d7956-460f-4c20-a95b-d50d82e17d88\"}})\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login (email, password, rememberMe, captcha = null) {\r\n        return axios.post(`https://social-network.samuraijs.com/api/1.0/auth/login`,\r\n            {email, password, rememberMe, captcha},\r\n            {withCredentials: true, headers: {\"API-KEY\": \"1f7d7956-460f-4c20-a95b-d50d82e17d88\"}})\r\n    }\r\n};","import {api, authAPI} from \"./api\";\r\n\r\nexport const ADD_TODOLIST = \"Todolist/Reducer/ADD-TODOLIST\";\r\nexport const ADD_TASK = \"Todolist/Reducer/ADD-TASK\";\r\nexport const CHANGE_TASK = \"Todolist/Reducer/CHANGE-TASK\";\r\nexport const DEL_TODOLIST = \"Todolist/Reducer/DEL-TODOLIST\";\r\nexport const DEL_TASK = \"Todolist/Reducer/DEL_TASK\";\r\nexport const SET_TODOLIST = \"Todolist/Reducer/SET_TODOLIST\";\r\nexport const SET_TASKS = \"TodoList/Reducer/SET_TASKS\";\r\nexport const LOGIN_FREE = \"LOGIN_FREE\"\r\n\r\n\r\nconst initialState = {\r\n    todoLists: [],\r\n    tasks: [],\r\n    isAuth: false\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_TODOLIST:\r\n            return {\r\n                ...state, todoLists: action.todolists.map(tl => ({...tl, tasks: []}))\r\n\r\n            }\r\n        case SET_TASKS:\r\n            return {\r\n                ... state, todoLists: state.todoLists.map(tl => {\r\n                    if (tl.id === action.todoListId) {\r\n                        return {\r\n                            ...tl, tasks: action.allTasks\r\n                        }\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n        case ADD_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todoLists: [...state.todoLists, action.newTodolist]\r\n            }\r\n        case ADD_TASK: {\r\n            return {\r\n                ...state,\r\n                todoLists: state.todoLists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {...tl, tasks: [action.newTask, ...tl.tasks]}\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        case CHANGE_TASK: {\r\n            return {\r\n                ... state,\r\n                todoLists: state.todoLists.map (todolist => {\r\n                    if (todolist.id === action.todolistId) {\r\n                        return{... todolist,\r\n                            tasks: todolist.tasks.map(task=> {\r\n                                if (task.id === action.taskId) {\r\n                                    return {... task, ...action.obj}\r\n                                }else {\r\n                                    return task\r\n                                }\r\n                            })}\r\n                    } else {\r\n                        return todolist\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        case DEL_TODOLIST: {\r\n            return {\r\n                ...state,\r\n                todoLists: state.todoLists.filter(t => {\r\n                    return t.id !== action.todolistId\r\n                })\r\n            }\r\n        }\r\n        case DEL_TASK: {\r\n            return {\r\n                ... state,\r\n                todoLists: state.todoLists.map (t => {\r\n                    if (t.id === action.todolistId) {\r\n                        return {...t,\r\n                            tasks: t.tasks.filter (task => task.id !== action.taskId)\r\n                        }\r\n                    }\r\n                    else {\r\n                        return t\r\n                    }\r\n                })\r\n\r\n            }\r\n        }\r\n        case LOGIN_FREE: {\r\n            return {\r\n                ... state, isAuth: true\r\n            }\r\n        }\r\n\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const addTaskAC = (newTask, todolistId) => {\r\n    debugger\r\n    return {type: ADD_TASK, newTask, todolistId}\r\n};\r\n\r\nexport const changeTaskAC = (taskId, obj, todolistId) => {\r\n    return {type: CHANGE_TASK, taskId, obj, todolistId}\r\n};\r\n\r\nexport const delTaskCallAC = (todolistId, taskId) => {\r\n    return {type: DEL_TASK, todolistId, taskId}\r\n};\r\n\r\nexport const addTodoAC = (newTodolist) => {\r\n    return {type: ADD_TODOLIST, newTodolist}\r\n};\r\n\r\nexport const delTodoListAC = (todolistId) => {\r\n    return {type: DEL_TODOLIST, todolistId}\r\n};\r\n\r\nexport const setTodoListsAC = (todolists) => {\r\n    return {type: SET_TODOLIST, todolists}\r\n};\r\n\r\nexport const setTasksAC = (allTasks, todoListId) => {\r\n    return {type: SET_TASKS, allTasks, todoListId}\r\n};\r\n\r\nexport const loginFreeAC = () => {\r\n    return {type: LOGIN_FREE}\r\n}\r\n\r\nexport const setTodoListsTC = () => (dispatch) => {\r\n    api.uploadTodolists()\r\n        .then(res => {\r\n            const action = setTodoListsAC(res.data);\r\n            dispatch(action)\r\n        });\r\n};\r\n\r\nexport const delTodoListTC = (todolistId) => (dispatch) => {\r\n    api.deleteTodoList(todolistId)\r\n        .then((res) => {\r\n           dispatch(delTodoListAC(todolistId))\r\n        })\r\n}\r\n\r\nexport const addTodoTC = (title) => (dispatch) => {\r\n    api.createTodoList(title)\r\n        .then(res => {\r\n            let newTodoList = res.data.data.item;\r\n            dispatch(addTodoAC(newTodoList))\r\n        })\r\n}\r\n\r\nexport const delTaskCallTC = (todolistId, taskId) => (dispatch) => {\r\n    api.deleteTask(taskId)\r\n        .then(res => {\r\n            dispatch(delTaskCallAC(todolistId, taskId))\r\n        });\r\n}\r\n\r\n/*export const changeTaskTC = (taskId, obj, todolistId, newTask) => (dispatch) => {\r\n    api.updateTasks(newTask)\r\n        .then( (res) => {\r\n            dispatch(changeTaskAC(taskId, obj, todolistId, newTask))\r\n        })\r\n}*/\r\n\r\nexport const addTaskTC = (todoListId, newText) => (dispatch) => {\r\n    api.createTask(todoListId, newText)\r\n        .then(res => {\r\n            let newTask = res.data.data.item;\r\n            dispatch(addTaskAC(newTask, todoListId))\r\n        });\r\n\r\n}\r\n\r\nexport const setTasksTC = (tasksId) => (dispatch) => {\r\n    api.getTasks(tasksId)\r\n        .then(res => {\r\n            let allTasks = res.data.items;\r\n            dispatch(setTasksAC(allTasks, tasksId))\r\n        });\r\n}\r\n\r\nexport const LoginThunk = (email, password, rememberMe, captcha) => (dispatch) => {\r\n    authAPI.login(email, password, rememberMe, captcha)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(loginFreeAC())\r\n            }\r\n            else {\r\n                if (response.data.resultCode === 10){\r\n                    return(alert(\"error\"))\r\n                }\r\n\r\n            }\r\n        });\r\n};\r\n\r\n\r\n\r\nexport default reducer;","import React from 'react';\nimport './App.css';\nimport {connect} from \"react-redux\"\nimport {delTodoListAC, delTodoListTC} from \"./reducer\";\n\n\n\nclass TodoListTitle extends React.Component {\n\n\n    deleteTodolist = () => {\n          this.props.deleteTodolist(this.props.id)\n    }\n\n\n    render = () => {\n\n\n        return (\n            <div>\n                <h3 className=\"todoList-header__title\">{this.props.title} <button onClick={this.deleteTodolist}>X</button>\n                </h3>\n\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        deleteTodolist: (todolistId) => {\n            const action = delTodoListTC (todolistId)\n            dispatch(action)\n            }\n        }\n}\n\n\n\nconst ConnectedTodoListTitle = connect(null, mapDispatchToProps) (TodoListTitle)\n\nexport default ConnectedTodoListTitle;\n\n","import React from 'react';\nimport './App.css';\nimport AddNewItemForm from \"./AddNewItemForm\";\nimport TodoListTitle from \"./TodoListTitle\";\n\nclass TodoListHeader extends React.Component {\n\n\n    render = () => {\n\n\n        return (\n            <div className=\"todoList-header\">\n                <TodoListTitle title={this.props.title} id={this.props.id}/>\n                <AddNewItemForm addItem={this.props.onTaskAdded}/>\n            </div>\n        );\n    }\n}\n\nexport default TodoListHeader;\n\n","import React from 'react';\nimport './App.css';\n\nclass TodoListTask extends React.Component {\n\n    state = {\n        editMode: false,\n        taskTitle: this.props.task.title\n    };\n\n    onIsDoneChanged = (e) => {\n        let status = e.currentTarget.checked ? 2 : 0;\n        this.props.onTaskStatusChanged(this.props.task.id, status);\n    };\n\n    activateEditMode = () => {\n        this.setState({editMode: true})\n    };\n\n    deactivateEditMode = () => {\n        this.setState({editMode: false})\n        this.props.onTaskTitleChanged(this.props.task.id, this.state.taskTitle)\n    };\n\n    onTitleChanged = (e) => {\n        this.setState({taskTitle: e.currentTarget.value})\n        //this.props.onTaskTitleChanged(e.currentTarget.value, this.props.task.id)\n    };\n\n    delTask = () => {\n        this.props.delTaskCall(this.props.id, this.props.task.id)\n    }\n\n\n\n\n    render = () => {\n\n        let checked = this.props.task.status === 2 ? \"todoList-task done\" : \"todoList-task\";\n\n        return (\n            <div className={checked}>\n                <input type=\"checkbox\" checked={this.props.task.status === 2}\n                       onChange={this.onIsDoneChanged}/>\n                {this.state.editMode ? <input onBlur={this.deactivateEditMode}\n                                              autoFocus={true} value={this.state.taskTitle}\n                                              onChange={this.onTitleChanged}/> :\n                    <span onClick={this.activateEditMode}>\n                   {/* {this.props.task.id} -*/} {this.props.task.title}</span>},\n                priority: {this.props.task.priority} <button onClick={this.delTask}>X</button>\n            </div>\n        );\n    }\n}\n\nexport default TodoListTask;\n\n","import React from 'react';\nimport './App.css';\nimport TodoListTask from \"./TodoListTask\";\n\nclass TodoListTasks extends React.Component {\n    render = () => {\n\n        let tasksElements = this.props.tasks.map( task => <TodoListTask task={task} id={this.props.id}\n                                                                        onTaskStatusChanged={this.props.onTaskStatusChanged}\n                                                                        onTaskTitleChanged={this.props.onTaskTitleChanged}\n                                                                        delTaskCall={this.props.delTaskCall}\n        />);\n\n        return (\n            <div className=\"todoList-tasks\">\n                {tasksElements}\n            </div>\n        );\n    }\n}\n\nexport default TodoListTasks;\n\n","import React from 'react';\nimport './App.css';\n\nclass TodoListFooter extends React.Component {\n\n    state = {\n        isHidden: false\n    };\n\n    onAllFilterClick = () => {\n        this.props.onFilterChanged(\"All\")\n    };\n    onCompletedFilterClick = () => {\n        this.props.onFilterChanged(\"Completed\")\n    };\n    onActiveFilterClick = () => {\n        this.props.onFilterChanged(\"Active\")\n    };\n    onShowFiltersClick = () => {\n        this.setState({isHidden: false})\n    };\n    onHideFiltersClick = () => {\n        this.setState({isHidden: true})\n    };\n\n    render = (props) => {\n\n        let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"\";\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"\";\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"\";\n\n        return (\n            <div className=\"todoList-footer\">\n                {!this.state.isHidden && <div>\n                    <button onClick={this.onAllFilterClick} className={classForAll}>All</button>\n                    <button onClick={this.onCompletedFilterClick} className={classForCompleted}>Completed</button>\n                    <button onClick={this.onActiveFilterClick} className={classForActive}>Active</button>\n                </div>}\n                {!this.state.isHidden && <span onClick={this.onHideFiltersClick}>Hide</span>}\n                {this.state.isHidden && <span onClick={this.onShowFiltersClick}>Show</span>}\n            </div>\n\n        );\n    }\n}\n\nexport default TodoListFooter;\n\n","import React from 'react';\nimport './App.css';\nimport TodoListHeader from \"./TodoListHeader\";\nimport TodoListTasks from \"./TodoListTasks\";\nimport TodoListFooter from \"./TodoListFooter\";\nimport {connect} from \"react-redux\"\nimport {addTaskAC, addTaskTC, changeTaskAC, delTaskCallAC, delTaskCallTC, setTasksAC, setTasksTC} from \"./reducer\";\nimport {api} from \"./api\";\n\nclass TodoList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.newTasksTitileRef = React.createRef();\n    };\n\n    componentDidMount() {\n        this.restoreState();\n    };\n\n    restoreState = () => {\n        this.props.setTasks(this.props.id)\n    };\n\n    nextTaskId = 0;\n\n    state = {\n        filterValue: \"All\"\n    };\n\n    onTaskAdded = (newText) => {\n        this.props.addTask(this.props.id, newText)};\n\n\n    onFilterChanged = (newFilterValue) => {\n        debugger\n        this.setState( {\n            filterValue: newFilterValue\n        } );\n    }\n\n    onTaskStatusChanged = (taskId, status) => {\n        this.changeTask(taskId, {status:status})\n    };\n\n    onTaskTitleChanged = (taskId, title ) => {\n        this.changeTask(taskId, {title:title})\n    };\n\n        changeTask = (taskId, obj) => {\n        let task = this.props.tasks.find((task) => {\n            return task.id === taskId\n        })\n        let newTask = {...task, ...obj}\n        api.updateTasks(newTask)\n            .then( (res) => {\n        this.props.updateTask (taskId, obj, this.props.id)\n            })\n    };\n\n    delTaskCall = (todolistId, taskId) => {\n        this.props.delTaskCall (todolistId, taskId)\n    }\n\n\n    render = () => {\n        let {tasks = []} = this.props;\n        return (\n            <div className=\"todoList\">\n                <TodoListHeader onTaskAdded={this.onTaskAdded} title={this.props.title} id={this.props.id} />\n                <TodoListTasks id={this.props.id} onTaskStatusChanged={this.onTaskStatusChanged}\n                               onTaskTitleChanged={this.onTaskTitleChanged} delTaskCall={this.delTaskCall}\n                               tasks={tasks.filter(t => {\n                                   if (this.state.filterValue === \"All\") {\n                                       return true;\n                                   }\n                                   if (this.state.filterValue === \"Active\") {\n                                       return t.status === 0;\n                                   }\n                                   if (this.state.filterValue === \"Completed\") {\n                                       return t.status === 2;\n                                   }\n                               })}/>\n                <TodoListFooter onFilterChanged={this.onFilterChanged} filterValue={this.state.filterValue} />\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addTask (todoListId, newText) {\n            const action = addTaskTC (todoListId, newText);\n            dispatch(action);\n        },\n        updateTask (taskId, obj, todolistId) {\n            const action = changeTaskAC (taskId, obj, todolistId);\n            dispatch(action);\n        },\n        delTaskCall (todolistId, taskId) {\n            const action = delTaskCallTC (todolistId, taskId)\n            dispatch(action);\n        },\n        setTasks (tasksId) {\n            const action = setTasksTC (tasksId);\n            dispatch(action)\n        }\n    }\n}\n\n\n\nconst ConnectedTodoList = connect(null, mapDispatchToProps) (TodoList)\n\nexport default ConnectedTodoList;","import React from 'react';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {connect} from \"react-redux\";\r\nimport {LoginThunk} from \"./reducer\";\r\n\r\n\r\nconst LoginForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field placeholder=\"free@samuraijs.com\" component={\"input\"} name={\"login\"} value={\"free@samuraijs.com\"}/>\r\n            <Field placeholder=\"free\"  component={\"input\"} name={\"password\"}/>\r\n            <Field  type={\"checkbox\"} component={\"input\"} name={\"rememberMe\"}/>\r\n            <button>LOGIN</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({form:'loginFree'})(LoginForm)\r\n\r\nconst LoginApp = (props) => {\r\n    const onSubmit = (formData) => {\r\n        props.LoginThunk(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {/*<Fade clear>*/}\r\n                <div>\r\n                    <LoginReduxForm onSubmit={onSubmit}/>\r\n                </div>\r\n            {/*</Fade >*/}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default connect(null, {LoginThunk})(LoginApp);","import React from 'react';\nimport './App.css';\nimport TodoList from \"./TodoList\";\nimport AddNewItemForm from \"./AddNewItemForm\";\nimport {connect} from \"react-redux\"\nimport {addTodoAC, addTodoTC, setTodoListsAC, setTodoListsTC} from \"./reducer\";\n// import Login from \"./Login\";\nimport LoginApp from \"./LoginApp\";\n\nclass App extends React.Component {\n\n    nextTaskId = 5;\n\n    state = {\n        todolists: []\n    }\n\n\n    addTodoList = (title) => {\n        this.props.addTodoList(title);\n    }\n\n    componentDidMount() {\n        this.restoreState();\n    }\n\n\n    restoreState = () => {\n        this.props.setTodoLists();\n    }\n\n\n    render = () => {\n\n        const todoLists = this.props.todoLists.map(t => <TodoList id={t.id} title={t.title} tasks={t.tasks}/>)\n\n        return (\n            <>\n\n                <div>\n                    <AddNewItemForm addItem={this.addTodoList}/>\n                </div>\n                <div className=\"App\">\n                    {todoLists}\n                </div>\n                <div>\n                    <LoginApp />\n                </div>\n            </>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        todoLists: state.todoReducer.todoLists,\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addTodoList: (newTodolist) => {\n            const action = addTodoTC(newTodolist);\n            dispatch(action)\n        },\n        setTodoLists: () => {\n            dispatch(setTodoListsTC())\n        }\n    }\n}\n\nconst ConnectedApp = connect(mapStateToProps, mapDispatchToProps)(App);\nexport default ConnectedApp;\n\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport mainReducer from \"./reducer\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { reducer as formReducer } from 'redux-form';\r\n\r\n\r\nlet Reducer = combineReducers({\r\n    form: formReducer,\r\n    todoReducer: mainReducer\r\n})\r\n\r\nlet store = createStore(Reducer, applyMiddleware(thunkMiddleware));\r\n\r\nwindow.store = store;\r\nexport default store;","import * as serviceWorker from './serviceWorker';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from \"./Store\";\nimport {Provider} from \"react-redux\";\n\n\nReactDOM.render(<Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}